--- a/src/views/SalesOrders/index.vue
+++ b/src/views/SalesOrders/index.vue
@@ -0,0 +1,658 @@
+<template>
+  <div class="p-4">
+    <el-form
+      ref="queryFormRef"
+      :model="queryForm"
+      label-width="90px"
+      inline
+      style="margin-bottom: 16px;"
+    >
+      <el-form-item label="订单号">
+        <el-input v-model="queryForm.orderNo" placeholder="请输入订单号" clearable />
+      </el-form-item>
+      <el-form-item label="客户">
+        <el-input v-model="queryForm.customerName" placeholder="请输入客户名称" clearable />
+      </el-form-item>
+      <el-form-item label="状态">
+        <el-select v-model="queryForm.status" placeholder="请选择状态" clearable style="width: 160px;">
+          <el-option
+            v-for="item in statusOptions"
+            :key="item.value"
+            :label="item.label"
+            :value="item.value"
+          />
+        </el-select>
+      </el-form-item>
+      <el-form-item label="下单日期">
+        <el-date-picker
+          v-model="queryForm.orderDateRange"
+          type="daterange"
+          range-separator="至"
+          start-placeholder="开始日期"
+          end-placeholder="结束日期"
+          value-format="YYYY-MM-DD"
+          clearable
+        />
+      </el-form-item>
+      <el-form-item>
+        <el-button type="primary" @click="handleSearch">查询</el-button>
+        <el-button @click="handleReset">重置</el-button>
+        <el-button type="success" @click="handleCreate">新增</el-button>
+      </el-form-item>
+    </el-form>
+
+    <el-table
+      v-loading="loading"
+      :data="tableData"
+      border
+      height="calc(100vh - 320px)"
+      row-key="id"
+      @row-dblclick="handleRowDblClick"
+    >
+      <el-table-column prop="orderNo" label="订单号" min-width="140" />
+      <el-table-column prop="customerName" label="客户" min-width="160" />
+      <el-table-column prop="productName" label="产品" min-width="160" />
+      <el-table-column prop="quantity" label="数量" width="80" align="center" />
+      <el-table-column label="金额" width="120" align="right">
+        <template #default="{ row }">
+          {{ formatAmount(row.amount) }}
+        </template>
+      </el-table-column>
+      <el-table-column label="状态" width="120" align="center">
+        <template #default="{ row }">
+          <el-tag :type="statusTagMap[row.status].type">
+            {{ statusTagMap[row.status].label }}
+          </el-tag>
+        </template>
+      </el-table-column>
+      <el-table-column prop="orderDate" label="下单日期" width="140" />
+      <el-table-column prop="deliveryDate" label="交付日期" width="140" />
+      <el-table-column label="操作" width="160" fixed="right">
+        <template #default="{ row }">
+          <el-button type="primary" link @click="handleEdit(row)">编辑</el-button>
+          <el-button type="danger" link @click="handleDelete(row)">删除</el-button>
+        </template>
+      </el-table-column>
+    </el-table>
+
+    <div style="margin-top: 16px; display: flex; justify-content: flex-end;">
+      <el-pagination
+        background
+        layout="total, sizes, prev, pager, next, jumper"
+        :current-page="pagination.page"
+        :page-size="pagination.size"
+        :page-sizes="[10, 20, 30, 50]"
+        :total="total"
+        @size-change="handleSizeChange"
+        @current-change="handleCurrentChange"
+      />
+    </div>
+
+    <el-dialog
+      v-model="dialogVisible"
+      :title="dialogTitle"
+      width="700px"
+      :close-on-click-modal="false"
+      @closed="handleDialogClosed"
+    >
+      <el-form ref="dialogFormRef" :model="dialogForm" :rules="dialogRules" label-width="100px">
+        <el-form-item label="订单号" prop="orderNo">
+          <el-input v-model="dialogForm.orderNo" placeholder="请输入订单号" />
+        </el-form-item>
+        <el-form-item label="客户" prop="customerName">
+          <el-input v-model="dialogForm.customerName" placeholder="请输入客户名称" />
+        </el-form-item>
+        <el-form-item label="产品">
+          <el-input v-model="dialogForm.productName" placeholder="请输入产品名称" />
+        </el-form-item>
+        <el-form-item label="数量" prop="quantity">
+          <el-input-number v-model="dialogForm.quantity" :min="1" :max="999999" />
+        </el-form-item>
+        <el-form-item label="金额">
+          <el-input-number v-model="dialogForm.amount" :min="0" :step="100" :precision="2" />
+        </el-form-item>
+        <el-form-item label="状态">
+          <el-select v-model="dialogForm.status" placeholder="请选择状态">
+            <el-option
+              v-for="item in statusOptions"
+              :key="item.value"
+              :label="item.label"
+              :value="item.value"
+            />
+          </el-select>
+        </el-form-item>
+        <el-form-item label="下单日期">
+          <el-date-picker
+            v-model="dialogForm.orderDate"
+            type="date"
+            value-format="YYYY-MM-DD"
+            placeholder="请选择下单日期"
+          />
+        </el-form-item>
+        <el-form-item label="交付日期">
+          <el-date-picker
+            v-model="dialogForm.deliveryDate"
+            type="date"
+            value-format="YYYY-MM-DD"
+            placeholder="请选择交付日期"
+          />
+        </el-form-item>
+      </el-form>
+      <template #footer>
+        <el-button @click="dialogVisible = false">取消</el-button>
+        <el-button type="primary" :loading="dialogSubmitting" @click="submitDialogForm">保存</el-button>
+      </template>
+    </el-dialog>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { nextTick, onMounted, reactive, ref } from 'vue'
+import type { FormInstance, FormRules } from 'element-plus'
+import { ElMessage, ElMessageBox } from 'element-plus'
+
+// types
+type OrderStatus = 'open' | 'closed'
+
+interface Order {
+  id: number
+  orderNo: string
+  customerName: string
+  productName: string
+  quantity: number
+  amount: number
+  status: OrderStatus
+  orderDate: string
+  deliveryDate: string
+}
+
+interface OrderQuery {
+  orderNo: string
+  customerName: string
+  status: '' | OrderStatus
+  orderDateRange: [string, string] | null
+}
+
+interface ListOrdersParams {
+  page: number
+  size: number
+  orderNo?: string
+  customerName?: string
+  status?: OrderStatus
+  orderDateRange?: [string, string]
+}
+
+interface PaginatedOrders {
+  list: Order[]
+  total: number
+}
+
+type OrderPayload = Omit<Order, 'id'>
+
+// mock api
+const mockOrders = ref<Order[]>([
+  {
+    id: 1,
+    orderNo: 'SO202401',
+    customerName: 'Acme Corp',
+    productName: '工业空调',
+    quantity: 12,
+    amount: 15800.5,
+    status: 'open',
+    orderDate: '2024-01-05',
+    deliveryDate: '2024-01-22'
+  },
+  {
+    id: 2,
+    orderNo: 'SO202402',
+    customerName: '凌峰电子',
+    productName: '高性能服务器',
+    quantity: 4,
+    amount: 98000,
+    status: 'open',
+    orderDate: '2024-01-18',
+    deliveryDate: '2024-02-05'
+  },
+  {
+    id: 3,
+    orderNo: 'SO202403',
+    customerName: '星辰工业',
+    productName: '智能传感器',
+    quantity: 120,
+    amount: 45600,
+    status: 'closed',
+    orderDate: '2024-02-03',
+    deliveryDate: '2024-02-20'
+  },
+  {
+    id: 4,
+    orderNo: 'SO202404',
+    customerName: '和光集团',
+    productName: '仓储管理系统',
+    quantity: 1,
+    amount: 125000,
+    status: 'open',
+    orderDate: '2024-02-12',
+    deliveryDate: '2024-03-01'
+  },
+  {
+    id: 5,
+    orderNo: 'SO202405',
+    customerName: '恒升科技',
+    productName: '工业机器人',
+    quantity: 6,
+    amount: 286000,
+    status: 'closed',
+    orderDate: '2024-03-01',
+    deliveryDate: '2024-03-25'
+  },
+  {
+    id: 6,
+    orderNo: 'SO202406',
+    customerName: '华南商贸',
+    productName: '冷链运输车',
+    quantity: 3,
+    amount: 84500,
+    status: 'open',
+    orderDate: '2024-03-10',
+    deliveryDate: '2024-04-05'
+  },
+  {
+    id: 7,
+    orderNo: 'SO202407',
+    customerName: '北辰医疗',
+    productName: '影像诊断设备',
+    quantity: 2,
+    amount: 315000,
+    status: 'closed',
+    orderDate: '2024-03-28',
+    deliveryDate: '2024-04-18'
+  },
+  {
+    id: 8,
+    orderNo: 'SO202408',
+    customerName: '瑞信物流',
+    productName: '仓库搬运车',
+    quantity: 15,
+    amount: 67500,
+    status: 'open',
+    orderDate: '2024-04-06',
+    deliveryDate: '2024-04-25'
+  },
+  {
+    id: 9,
+    orderNo: 'SO202409',
+    customerName: '鼎盛能源',
+    productName: '燃气轮机',
+    quantity: 1,
+    amount: 480000,
+    status: 'closed',
+    orderDate: '2024-04-15',
+    deliveryDate: '2024-05-12'
+  },
+  {
+    id: 10,
+    orderNo: 'SO202410',
+    customerName: '远航航运',
+    productName: '船载导航系统',
+    quantity: 8,
+    amount: 224000,
+    status: 'open',
+    orderDate: '2024-04-22',
+    deliveryDate: '2024-05-08'
+  },
+  {
+    id: 11,
+    orderNo: 'SO202411',
+    customerName: '嘉盛食品',
+    productName: '智能冷柜',
+    quantity: 30,
+    amount: 93600,
+    status: 'open',
+    orderDate: '2024-05-03',
+    deliveryDate: '2024-05-28'
+  },
+  {
+    id: 12,
+    orderNo: 'SO202412',
+    customerName: '旭日光伏',
+    productName: '储能逆变器',
+    quantity: 18,
+    amount: 162000,
+    status: 'closed',
+    orderDate: '2024-05-12',
+    deliveryDate: '2024-06-02'
+  },
+  {
+    id: 13,
+    orderNo: 'SO202413',
+    customerName: '蓝海科技',
+    productName: '边缘计算服务器',
+    quantity: 5,
+    amount: 132500,
+    status: 'open',
+    orderDate: '2024-05-20',
+    deliveryDate: '2024-06-10'
+  },
+  {
+    id: 14,
+    orderNo: 'SO202414',
+    customerName: '宏图制造',
+    productName: '激光切割机',
+    quantity: 2,
+    amount: 258000,
+    status: 'closed',
+    orderDate: '2024-05-25',
+    deliveryDate: '2024-06-18'
+  },
+  {
+    id: 15,
+    orderNo: 'SO202415',
+    customerName: '启航汽车',
+    productName: '智能驾驶系统',
+    quantity: 9,
+    amount: 342000,
+    status: 'open',
+    orderDate: '2024-05-30',
+    deliveryDate: '2024-06-22'
+  }
+])
+
+const wait = (ms: number) =>
+  new Promise<void>((resolve) => {
+    globalThis.setTimeout(resolve, ms)
+  })
+
+const listOrders = async (params: ListOrdersParams): Promise<PaginatedOrders> => {
+  await wait(300)
+  const { page, size, orderNo, customerName, status, orderDateRange } = params
+
+  let filtered = [...mockOrders.value]
+
+  if (orderNo) {
+    const value = orderNo.trim().toLowerCase()
+    filtered = filtered.filter((item) => item.orderNo.toLowerCase().includes(value))
+  }
+
+  if (customerName) {
+    const value = customerName.trim().toLowerCase()
+    filtered = filtered.filter((item) => item.customerName.toLowerCase().includes(value))
+  }
+
+  if (status) {
+    filtered = filtered.filter((item) => item.status === status)
+  }
+
+  if (Array.isArray(orderDateRange) && orderDateRange.length === 2) {
+    const [start, end] = orderDateRange
+    filtered = filtered.filter((item) => item.orderDate >= start && item.orderDate <= end)
+  }
+
+  const startIndex = (page - 1) * size
+  const list = filtered.slice(startIndex, startIndex + size)
+
+  return {
+    list,
+    total: filtered.length
+  }
+}
+
+const getOrder = async (id: number): Promise<Order> => {
+  await wait(200)
+  const target = mockOrders.value.find((item) => item.id === id)
+  if (!target) {
+    throw new Error('订单不存在')
+  }
+  return { ...target }
+}
+
+const createOrder = async (payload: OrderPayload): Promise<Order> => {
+  await wait(300)
+  const nextId =
+    mockOrders.value.length > 0
+      ? Math.max(...mockOrders.value.map((item) => item.id)) + 1
+      : 1
+  const newOrder: Order = { id: nextId, ...payload }
+  mockOrders.value.unshift(newOrder)
+  return { ...newOrder }
+}
+
+const updateOrder = async (id: number, payload: OrderPayload): Promise<Order> => {
+  await wait(300)
+  const index = mockOrders.value.findIndex((item) => item.id === id)
+  if (index === -1) {
+    throw new Error('订单不存在')
+  }
+  const updated: Order = { id, ...payload }
+  mockOrders.value.splice(index, 1, updated)
+  return { ...updated }
+}
+
+const removeOrder = async (id: number): Promise<void> => {
+  await wait(200)
+  const index = mockOrders.value.findIndex((item) => item.id === id)
+  if (index === -1) {
+    throw new Error('订单不存在')
+  }
+  mockOrders.value.splice(index, 1)
+}
+
+// state
+const statusTagMap: Record<OrderStatus, { label: string; type: string }> = {
+  open: { label: '开放', type: 'success' },
+  closed: { label: '已关闭', type: 'info' }
+}
+
+const statusOptions = (Object.keys(statusTagMap) as OrderStatus[]).map((value) => ({
+  value,
+  label: statusTagMap[value].label
+}))
+
+const queryFormRef = ref<FormInstance>()
+const queryForm = reactive<OrderQuery>({
+  orderNo: '',
+  customerName: '',
+  status: '',
+  orderDateRange: null
+})
+
+const pagination = reactive({
+  page: 1,
+  size: 10
+})
+
+const tableData = ref<Order[]>([])
+const total = ref(0)
+const loading = ref(false)
+
+const dialogVisible = ref(false)
+const dialogTitle = ref('')
+const dialogSubmitting = ref(false)
+const dialogFormRef = ref<FormInstance>()
+const currentOrderId = ref<number | null>(null)
+
+const createEmptyOrder = (): OrderPayload => ({
+  orderNo: '',
+  customerName: '',
+  productName: '',
+  quantity: 1,
+  amount: 0,
+  status: 'open',
+  orderDate: '',
+  deliveryDate: ''
+})
+
+const dialogForm = reactive<OrderPayload>(createEmptyOrder())
+
+const dialogRules: FormRules<OrderPayload> = {
+  orderNo: [{ required: true, message: '请输入订单号', trigger: 'blur' }],
+  customerName: [{ required: true, message: '请输入客户名称', trigger: 'blur' }],
+  quantity: [{ required: true, message: '请输入数量', trigger: 'change' }]
+}
+
+// methods
+const formatAmount = (value: number) => Number(value ?? 0).toFixed(2)
+
+const loadData = async () => {
+  loading.value = true
+  try {
+    const params: ListOrdersParams = {
+      page: pagination.page,
+      size: pagination.size
+    }
+
+    if (queryForm.orderNo.trim()) {
+      params.orderNo = queryForm.orderNo.trim()
+    }
+
+    if (queryForm.customerName.trim()) {
+      params.customerName = queryForm.customerName.trim()
+    }
+
+    if (queryForm.status) {
+      params.status = queryForm.status
+    }
+
+    if (Array.isArray(queryForm.orderDateRange) && queryForm.orderDateRange.length === 2) {
+      params.orderDateRange = [
+        queryForm.orderDateRange[0],
+        queryForm.orderDateRange[1]
+      ]
+    }
+
+    const { list, total: totalCount } = await listOrders(params)
+    tableData.value = list
+    total.value = totalCount
+  } finally {
+    loading.value = false
+  }
+}
+
+const handleSearch = () => {
+  pagination.page = 1
+  void loadData()
+}
+
+const handleReset = () => {
+  queryForm.orderNo = ''
+  queryForm.customerName = ''
+  queryForm.status = ''
+  queryForm.orderDateRange = null
+  pagination.page = 1
+  void loadData()
+}
+
+const handleSizeChange = (size: number) => {
+  pagination.size = size
+  pagination.page = 1
+  void loadData()
+}
+
+const handleCurrentChange = (page: number) => {
+  pagination.page = page
+  void loadData()
+}
+
+const resetDialogForm = () => {
+  Object.assign(dialogForm, createEmptyOrder())
+}
+
+const handleCreate = async () => {
+  dialogTitle.value = '新增订单'
+  currentOrderId.value = null
+  resetDialogForm()
+  dialogVisible.value = true
+  await nextTick()
+  dialogFormRef.value?.clearValidate()
+}
+
+const openEditDialog = async (id: number) => {
+  try {
+    const order = await getOrder(id)
+    const { id: _id, ...payload } = order
+    dialogTitle.value = '编辑订单'
+    currentOrderId.value = id
+    resetDialogForm()
+    Object.assign(dialogForm, payload)
+    dialogVisible.value = true
+    await nextTick()
+    dialogFormRef.value?.clearValidate()
+  } catch (error) {
+    ElMessage.error((error as Error).message || '加载订单失败')
+  }
+}
+
+const handleEdit = (row: Order) => {
+  void openEditDialog(row.id)
+}
+
+const handleRowDblClick = (row: Order) => {
+  void openEditDialog(row.id)
+}
+
+const submitDialogForm = async () => {
+  if (!dialogFormRef.value) {
+    return
+  }
+
+  try {
+    await dialogFormRef.value.validate()
+  } catch {
+    return
+  }
+
+  const payload: OrderPayload = { ...dialogForm }
+  dialogSubmitting.value = true
+
+  try {
+    if (currentOrderId.value === null) {
+      await createOrder(payload)
+      pagination.page = 1
+      ElMessage.success('新增成功')
+    } else {
+      await updateOrder(currentOrderId.value, payload)
+      ElMessage.success('更新成功')
+    }
+    dialogVisible.value = false
+    await loadData()
+  } catch (error) {
+    ElMessage.error((error as Error).message || '保存失败')
+  } finally {
+    dialogSubmitting.value = false
+  }
+}
+
+const handleDelete = async (row: Order) => {
+  try {
+    await ElMessageBox.confirm(`确认删除订单 ${row.orderNo} 吗？`, '提示', {
+      confirmButtonText: '确定',
+      cancelButtonText: '取消',
+      type: 'warning'
+    })
+
+    await removeOrder(row.id)
+    if (tableData.value.length === 1 && pagination.page > 1) {
+      pagination.page -= 1
+    }
+    await loadData()
+    ElMessage.success('删除成功')
+  } catch (error) {
+    if (error === 'cancel' || error === 'close') {
+      return
+    }
+    if (error instanceof Error) {
+      ElMessage.error(error.message || '删除失败')
+    }
+  }
+}
+
+const handleDialogClosed = () => {
+  resetDialogForm()
+  currentOrderId.value = null
+  dialogFormRef.value?.clearValidate()
+}
+
+onMounted(() => {
+  void loadData()
+})
+</script>
